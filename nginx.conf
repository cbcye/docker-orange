user www www;
worker_processes auto;
worker_rlimit_nofile 51200;

daemon off;
env ORANGE_PATH;

events {
  worker_connections  65535;
  multi_accept on;
  use epoll;
}

http {
  resolver 127.0.0.1 ipv6=off; # replace it with your favorite config
  charset UTF-8;
  include ./mime.types;

  # Main Log
  log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  ./logs/access.log  main;
  error_log ./logs/error.log info;

  # Timeouts
  sendfile        on;
  keepalive_timeout 60s;
  client_header_timeout 60s;
  client_body_timeout 60s;
  send_timeout 60s;

  # Proxy Settings
  proxy_buffer_size 128k;
  proxy_buffers 4 256k;
  proxy_busy_buffers_size 256k;
  proxy_ssl_server_name on;

  # IP Address
  real_ip_header X-Forwarded-For;
  set_real_ip_from 0.0.0.0/0;
  real_ip_recursive on;

  # Other Settings
  client_max_body_size 0;
  underscores_in_headers on;
  reset_timedout_connection on;
  tcp_nopush on;

  ################################################
  # The following code is required to run Orange #
  # Please be careful if you'd like to change it #
  ################################################

  upstream default_upstream {
    server localhost:8001;
  }

  # Lua Settings
  lua_package_path '/usr/local/orange/?.lua;/usr/local/lor/?.lua;;';
  lua_code_cache on;
  lua_max_running_timers 4096;
  lua_max_pending_timers 16384;
  lua_socket_log_errors off;

  lua_shared_dict orange_data 20m; # should not removed. used for orange data, e.g. plugins configurations..
  lua_shared_dict status 1m;       # used for global statistic, see plugin: stat
  lua_shared_dict waf_status 1m;   # used for waf statistic, see plugin: waf
  lua_shared_dict monitor 10m;     # used for url monitor statistic, see plugin: monitor
  lua_shared_dict rate_limit 10m; # used for rate limiting count, see plugin: rate_limiting

  init_by_lua_block {
    local orange_path = os.getenv("ORANGE_PATH");
    local config_file = orange_path .. "/orange.conf"
    local orange = require("orange.orange")
    local config, store = orange.init({
      config = config_file
    })

    -- the orange context
    context = {
      orange = orange,
      store = store,
      config = config,
      views_path = orange_path .. "/dashboard/views"
    }
  }

  init_worker_by_lua_block {
    local orange = context.orange
    orange.init_worker()
  }

  # main server
  server {
    listen       8888;
    #server_name  put_your_api_gateway_access_domain_here;

    location = /favicon.ico {
      log_not_found off;
      access_log off;
    }

    location / {
      set $upstream_host $host;
      set $upstream_url 'http://default_upstream';

        rewrite_by_lua_block {
          local orange = context.orange
          orange.redirect()
          orange.rewrite()
        }

      access_by_lua_block {
        local orange = context.orange
        orange.access()
      }

      # proxy
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Scheme $scheme;
      proxy_set_header Host $upstream_host;
      proxy_pass $upstream_url;

      header_filter_by_lua_block {
        local orange = context.orange
        orange.header_filter()
      }

      body_filter_by_lua_block {
        local orange = context.orange
        orange.body_filter()
      }

      log_by_lua_block {
        local orange = context.orange
        orange.log()
      }
    }

    location /robots.txt {
      return 200 'User-agent: *\nDisallow: /';
    }
  }


  # orange dashboard server
  server {
    listen       9999;
    #server_name  localhost;
    access_log ./logs/orange_access.log main;
    error_log ./logs/orange_error.log;

    location = /favicon.ico {
      log_not_found off;
      access_log off;
    }

    location /robots.txt {
      return 200 'User-agent: *\nDisallow: /';
    }


    # dashboard的静态文件
    location ~* /orange/static/(.*) {
      alias ./dashboard/static/$1;
    }

    location / {
      set $template_root '';
      content_by_lua_block {
        require("dashboard.main")(context.config, context.store, context.views_path)
      }
    }
  }

  server {
    listen       7777;
    #server_name  localhost;
    access_log ./logs/api_access.log main;
    error_log ./logs/api_error.log;

    location = /favicon.ico {
      log_not_found off;
      access_log off;
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    location / {
      content_by_lua_block {
        ngx.header["Access-Control-Allow-Origin"] = "*"
        require("api.main")(context.config, context.store)
      }
    }
  }

  # default upstream server
  server {
    listen 8001;
    server_name localhost 127.0.0.1;
    access_log ./logs/default_upstream_access.log main;
    error_log ./logs/default_upstream_error.log;
    location / {
      content_by_lua_block {
        ngx.status = 404
        ngx.say("You are using Orange, but you have not set upstream servers for your project.\n")
        ngx.say("Host: " .. ngx.var.host .. "  URI: " .. ngx.var.uri)
      }
    }
  }
}
